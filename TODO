0.96:
- Theres a crasher every time longjmp is called.
  Write a test somehow to ensure that longjmp works.
- Print failures and errors after the test is finished running.
- Try to clean up and re enable the newline tests

0.97:
- Force the STDERR section to always come before STDOUT.
- Get rid of the globals, put all state into struct test.
- Convert to libev http://software.schmorp.de/pkg/libev.html to get rid of my poorly maintained libio.
- Read every stream to exhaustion before finishing the test.
- Get rid of all re2c scanners.  Make everything memory-based.
- Get rid of all the gratuitous sleeps in the code and tests.
- Don't send entire testfile to bash, strip the STDOUT and STDERR ourselves.
- Get rid of MYFILE variables?
- Get rid of template.sh?
- This friggin buserrors:
    head -c -1 <<-EOL | tmtest -d -v -q -
        echo -n Howdy
        STDOUT:
        Howdy
    EOL
  It's because we never set diff_fd but we start with a zeroed test struct so
  we just end up using diff_fd=0.  stdin.  Shocking that it works at all.
  This should just go away once we're membuffering tests and reading to exhaustion.

0.98
- Munge diff file to have a/file and b/file so there's no need to pass -p0
- Allow running more than one test at once.  Add -j option like gmake.
- Do not run a config file unless it's owned by the user running tmtest.
  (and print a fat warning if any config files are skipped)
- Try to get rid of tmtest.conf completely.
  - Scan upward from the current dir to the root dir, adding dirs that contain
    executables to the PATH.
    - Deeper dirs override shallower ones.
    - Don't check subdirs, there's too much chance for mistake.
      - Maybe we could check subdirs with well-known names, like src or .lib?
    - Don't add any world-writable dirs (like /tmp) or the user's home dir
  - Supply the original path in ORIGPATH
  - NO!  Maybe that's not good.  Maybe each test should just declare its deps?
    - No because that fails being able to run tests without tmtest.
- Then try to get rid of template.sh and all that mess
- Maybe add a -x command that would run the test under exec 2>&1; set -x

0.99
- Remove the allfiles and quiet options.
- do we test the exit value?  if so, doc it.
- Disabled tests are not ignored when running tmtest -d?
  /home/bronson/workspace-tmtest/tmtest/test/02-running/50-OpenFDsTest.test
- Is this related to tmtest -d showing a bunch of differences even when tmtest doesn't?
  Or is it due to starting to generate a diff file before we notice the test is disabled?
- Add a timeout that will terminate stalled tests.  You can set the timeout
  in the config file or the test itself.
- Reomve as many TODOs as possible.

1.0+:
- Add --diff and --shell to change the executables that get launched.
  No, that clutters the arguments up.  Take them from $DIFF and $SHELL.
  No, obviously that's a bad idea.  That prevents people using tcsh
  from running tmtest.  It *has* to be --shell.  $DIFF is fine.
  And we need to make sure that we ignore the SHELL envar.
  	(write a test for this)
	OK, I think it should be TM_DIFF and TM_SHELL.  Easy enough.
	The trick will be writing the tests.
- Add the ability to specify test arguments on the command line.
  I'm picturing something where VAR=val on the command line would be
  inserted without change into the template.  That way you can use the
  command line to override default settings in the testfile.
  - This would allow us to test almost every test to ensure it
    supports the --config argument (make them DISABLED or something).
  - How it will work: we insert each value at the start of the testscript.
    That way the config files can pick up on them.  We ALSO insert them
	just before we run the test.  That way we can override the config files.
	True, we can't override what's in the test script, but that's OK.
- write tests for nesting testfiles with --config.
        // If the user specifies a config file, we only check directories
        // not above the given config file.  i.e. if user specifies
        // "tmtest -c /a/b/cc /a/t/u/t.test", we will look for config files
        // in /a/t/tmtest.conf and /a/t/u/tmtest.conf.
- Get rid of all the exit() calls from main.c.
- Ensure it compiles and runs on freebsd and mac.
- Get rid of -g, add -O2.  Make it easy to set these for compilation.
  Yes, have dev and prod modes.  dev would be -O0 and -g and include
  unit tests.  Prod is -O2 and stripped.
- Try to re-enable some of the disabled tests.  Especially the openfds
  test; it's helped in the past to ensure that we don't leak fds.

1.1+:
- Document tmtest and testfile with naturaldocs?
  - This also allows us to get rid of STATUSFD so that NO other fds are open
    when running the test.  OUTFD and ERRFD still need to be open when
	running the config files though.
- Is there any way to record memory and swap usage for each test?
  sure, it's in the rusage. prolly add a "tmtest -v" to print it for each test.
- stdin is all buggered up.  why is it that "cat" with no args will print
  the rest of the test script?  And why is it that if you fork, diff freezes?
  They're related problems I suspect.
    Is it because I'm forgetting to close all open filehandles before forking?
- Add a --continuous argument that will cycle through all tests tmtest
  can find.  It prints nothing if a test succeeds, or the fail notice
  if it fails.  Runs until cancelled with ^C.  Let it run overnight and
  see if any of your tests have intermittent failures.

1.2+:
- Add the ability to run multiple tests from one testfile.
  See tmtest 0.8 for a potential implementation of this.
  All we'd need to add is a framework to notify the user that multiple
  tests are in progress; bash can take care of the rest.

2.0+:
- there's no need to only write testfiles in bash.  we should support any
  scripting language.  get the interpreter from a shebang or file extn.
- add gcov support so you can see what sort of coverage your tests provide.
- add the ability to run valgrind over each test and print success/failure
  of that.  (gives deep valgrind coverage)
  - One problem with this will be all the false warnings that valgrind spews.

????:
- Right now we're tied really tightly to bash.  Any chance of getting
  rid of the Bashisms and allowing tmtest to be run by any POSIX shell?
  (not very important since testfiles tend to end up with Bashisms anyway).
  (still, it could provide a very nice speedup if we switched to dash).
- There should be a way to repeatedly run a single test with only tiny
  differences.  i.e. test all permeutations of a function
  Hopefully that will clean up 05-08-Disable/Abort.test
- I don't like that $tmtest expands to "$tmtest --config=...".  That's
  not what one would normally expect.  However, since it also potentially
  expands to "valgrind tmtest --config..." it's not THAT bad -- it's
  never just a filename.  Maybe change $tmtest to $tmtest_cmd?  In every
  test... arg.  or something!
