=head1 NAME

testfile - the format of tmtest's input files.


=head1 DESCRIPTION

A test file is a script that describes a single test to perform.
It is a simple text file with a syntax that is inspired by bash and
RFC822 email messages.

=head1 FILE NAMES

Test files may be named anything at all just so long as they end in ".test".
The ".test" extension is mandatory (this way, you can run "tmtest *" inside a
directory that contains all kinds of files, and tmtest will only
execute the test files).

Test files are often named using following convention:

    01-EnsureEchoCmdWorks.test
    02-TestEchoNewlines.test
    etc.

The 2-digit sequence number specifies the order in which the tests should be
run.  The simplest tests should be run first, and the most specific and complex
tests should be run last.  After the sequence number comes the test's title
and the F<.test> extension.

=head1 COMMENTS

Lines that begin with '#' are comments.
Leading whitespace is ignored so comments may be indented.
You might be able to use the L</"desc"> header instead of comments.

=head1 HERE DOCUMENTS

You can send arbitrary text to commands and files using a here document.
In its most basic form a here document looks like this:

    testcommand <<EOL
    text content
        indented text
    more text
    EOL

See L</"Create Files"> and L</"Commands"> below for more examples.

A here document is started using"<<KEY" where
KEY is a word that will never appear on a line by itself
in the document itself.  The document continues until
the first line that contains KEY on a line by itself with
no leading or trailing whitespace.  If KEY is omitted, the
here document will be terminated at C<E<gt>E<gt>> on a line by itself.

To improve legibility of the here douments, leading whitespace
can be stripped using '-'.  The following here document would produce
exactly the same output as the previous one:

    testcommand <<-EOL
        text content
            indented text
        more text
    EOL

The dash says to strip the exact whitespace found on the front of the
first nonblank line from the front of all subsequent lines.  Note that
the difference between spaces and tabs is significant, so you need be
careful that each line is indented with the exact same characters.

When putting a here document in a pipeline, you're passing
the document to the first command, not to the last.  Make sure to
specify the here document in the correct place:

    $ tr a-z A-Z <<EOL | tr 0-3 a-c		# correct
    $ tr a-z A-Z | tr 0-3 a-c <<EOL		# wrong -- ambiguous!

By default L</"Interpolation"> is not performed on here docs.
You can change this using the L</"interpolate"> header.

=head1 HEADERS

Headers contain information about the test, such as the title,
author, and date.  They may come in any order.  Header names are always
case-insensitive.  In general, they are just RFC822 headers.

Headers are very simple: "name: value".  The name cannot contain any whitespace.
The value is interpreted up until the newline.  A header may be continued
by indenting the following line.

    author: jimmy james, joe parrot,
	   joebob, jasper, and jed.

If whitespace within the header is significant, use a here document
instead of indentation
to continue the header.  The here document key must be the last item
on the line.  "stdout: content <<EOL" and "stdout: <<EOL content" are
considered errors.  Of course, the parameters passed to L</"Create Files">
are legal.

    stdout: <<EOL
        it worked.
        sucess!!
    EOL

Headers may also start with C<=> and C<+=>.  C<=> is exactly equivalent
to C<:>, but C<+=> appends the new value to the current value.

    files = one two
    files = $(files) three
    files += four       # exactly equivalent to the above line
    # now files is "one two three four".

Some headers have a little magic.  See L</"Create Files"> for more.

=head2 Interpolation

You can interpolate headers into commands, heredocs, or other headers
using C<$(I<header>)> or C<${I<header>}> syntax (parentheses and
braces have slightly different meanings).
For example, the following is equivalent to the command "echo hi":

	cmd: echo
	phrase: hi
	$(cmd) $(phrase)

And this adds a new eachline command without removing any eachlines
set in previous config files.

    eachline: ${eachline} s/\d+\\.\\d+/VERSION/g

Parentheses signify an interpolation that must exist.  tmtest will
print a warning if it doesn't.  Braces surround interpolations
that are optional.  The eachline interpolation in the example
above is optional since we don't want tmtest to print
a warning if an eachline header hasn't been set yet.

Bare interpolation (C<$var>, with no parens or braces)
is supported as well but because it's confusing if you're not
expecting it, it's turned off by default.  See the 
L</"bare-interpolation"> header.

tmtest supports any level of recursive interpolations.  This is
very useful for making indirect headers, headers that contain the
name of the header that contains the desired value.  An example
might make this clearer.  The following would store "The Value" in arg2.

  arg: The Value
  aname: arg
  arg2: $($(aname))

=head2 Defined Headers

These the headers that tmtest currently recognizes.  You can, of course,
define and use headers of any name.  You should use a unique prefix for
your own headers for two reasons: to avoid conflict with headers defined
in later versions of tmtest, and to make your custom headers visually
distinct from the built-in ones.

=over 8

=item title

This is the name of the test.  It should be descriptive, but be less
than 40 characters or so.  Tests conventionally use book title
capitalization.

=item author

The author of the test.  This may be the author's initials, his
login, her email address, or any other identifier unique to the
project.

=item date

The date the test was first written.  It should not be updated if the
test is modified.  "12 Jul 2003" is the suggested date format because it
doesn't suffer from the European vs. American month/day ambiguity yet it's
still very readable.  However, you may use any standard format you'd like.

=item desc

A brief description for this test.  This should not be more than 2 or
3 lines.

=item doc

Comprehensive documentation for the test.

=item curfile

This header is supplied automatically.  It contains the name
of the file currently being read.

=item curpath

This header is supplied automatically.  It contains the full path
to the file currently being read.

=item include

This allows you to include headers from another file in the current
test file.  It doens't run commands or create the files listed in
the included file -- it only works for headers.

    include: clean-headers.inc

=item interpolate

Turns on L<interpolation|/"Interpolation"> for the named items.
For instance, C<interpolate: commands, stdin> will turn on
interpolation on the text of each command being run and on
the stdin passed to them.  Interpolation is always on for
headers.

Note that it's usually a good idea to include the previous
value of interpolate in your expression
(C<interpolate: ${interpolate} my.file>).  This allows
you to turn interpolations on from any config file, not
just the testfile.

Here are the interpolations you can enable:

=over 4

=item all

=item everything

Enables interpolation on everything.

=item commands

=item command

Enables interpolation on the text of each command being run.
This is turned on by default.

=item execfiles

Enables interpolation on all executable L</"Create Files">.

=item files

=item allfiles

=item all-files

Enables interpolation on all L</"Create Files">.

=item headers

=item header

Enables interpolation when defining all headers.
This is turned on by default.

=item stdin

Enables interpolation on the input passed to each command.

=item stdout
=item stderr

Enables interpolation on the command's output.

=item I<filename>

This enables interpolation only on the L<create file|/"Create Files">
named I<filename>.

=back

=item interpolate-bare

=item bare-interpolation

Tells whether or not we should interpolate variables of the form
C<$var>.  interpolate-bare is turned off by default so tmtest
only interpolates C<$(var)> and C<${var}>.  If you set
C<interpolate-bare: yes>, then the surrounding parens are not
needed.

=item disabled

Disables the test from being executed.  It won't be counted as a
failure, but it won't be counted as a success either.  You can
capitalize the words any way you want -- case is ignored.
"disable" also works.

    Disabled: Yes

=item enabled

You can mark a test disabled by adding an "enabled: no" header.
You can optionally follow the "no" with a blurb describing why
the test has been disabled: "enabled: no, because it's obsolete."
"Enable" also works.

The L</"disabled"> header does the exact same thing, but with the
opposite sense.

=item require-tmtest

Some tests require features not found in earlier versions of tmtest.
This header makes these dependencies explicit.  If the version of
tmtest running the test is too old, the test will be skipped.

    require-tmtest: 1.01

=item executable

Normally tmtest discovers which executable to run via the PATH
environment variable.  However, during development, there's
a very good
chance that the program under test will not be in your PATH.
Use "executable" to explicitly specify the executable's location.

The format is "name=value", where name is the name of the command
as it appears
in the testfile ("C<echo>"), and value is its full path ("C</usr/bin/echo>").
For instance, the
following lines cause /usr/local/bin/banner to be called with the
string "hello":

    executable: banner=/usr/local/bin/banner
    banner hello

In an executable header, C<$(curpath)> will be replaced with the full
path of the directory containing the configuration file currently being parsed
(see L</"curpath">).
Therefore,
if you know that the command is in the same directory
as the config file, you can simply put this line in your config file:

    executable: mycmd=$(curpath)/mycmd

Now, for all testfiles in that directory, running "mycmd" actually
executes $(curpath)/mycmd.

Note that executable replaces the command found alone anywhere in the
command line.  For instance, if you're specifying the executable for
mycmd, the following will all replace mycmd with the full path:

  mycmd
  exec mycmd
  exec "mycmd"

But these won't:

  .mycmd
  "exec mycmd"

=item eachline

This allows you to run a perl statement on each line of the command's
output (both stdout and stderr).  For instance, because timestamps change
each second, they cannot remain in the test results.  The following
example converts lines like "Date: Thu, 22 Jul 2004 06:58:33 GMT" to
"Date: DATE DATE DATE".

	eachline: s/^Date:.*\$/Date: DATE DATE DATE/

Remember that variables are interpolated in headers, so all dollar
signs C<$> need to be esacped with a backslash C<\$> if you don't
want them to interpolate a tmtest header.  This also means that all 
backslashes (C<\>) need to be escaped with a backslash as well (C<\\>).

=item explode-dir

=item explodedir

Tells what directory should contain the exploded test files.  It will be
created if it doesn't already exist but its parents won't.
Default value is F</tmp/tmtest>.

=item subtests

=item subtest

Specifies that this test file contains subtests.  See
L</SUBTESTS>.

=back

=head2 Create Files

You can create files during the testing.  The following command creates
a file with a temporary name (something like /tmp/tmtest-crfile-PID).
The file contains a single line, "contents" (see
L<Here Documents|/"HERE DOCUMENTS"> for more on how to specify the
file contents using here documents).

  fn: file = <<-EOL
    contents
  EOL

  cat $fn
 
Notice that this syntax is identical to declaring a header and then
interpolating the header into the command.  That is in fact exactly
what is happening.  The magic "file=" at the start
of the header tells tmtest that this particular header is declaring
a file instead of a regular header.  Note the warning in L</"BUGS"> however.

Note that this means that the same restrictions that apply to header
names apply to filenames.  In particular, no whitespace is allowed.
Also, headers are always case-insensitive.  filenames depend on the
underlying filesystem.  To ensure your tests run on as many platforms
as possible, you should always treat filenames as case-sensitive.

OK, but what exactly does this produce?  The example above is 
pretty equivalent to running the following commands
where TMP-FN-NAME is a dynamically generated filename:

  cat > /tmp/TMP-FN-NAME <<-EOL
    contents
  EOL

  cat /tmp/TMP-FN-NAME

  rm /tmp/TMP-FN-NAME

If you want to create an empty file for later use, simply omit the
"C<=<<EOL>":

  tmpfile: file
  echo "1 2 3" > $(tmpfile)

Files are created in the directory specified by the TMPDIR environment
variable if specified.  If not, the files are created in /tmp.  If
/tmp cannot be written to for some reason, they are created in the directory
containing the test being run.

Create files are automatically deleted after all commands have run,
regardless of whether there was an error.  To track down an error,
you should explode the testfile (see L<tmtest/"-E">) and experiment
with the files directly.

You may specify the extension that a file should have by simply following
the variable name with the extension.  Note that if you specify the extension
when defining the file, you must also specify it when using it.

  fn.cont: file = <<-EOL
    contents
  EOL

  cat $fn.cont

You may specify that the created file should be marked executable
by calling it an execfile.  Then you may run it by either specifying
it directly (this is OK because $(ttf) is replaced with a fullpath)
or, to be more explicit, you can exec it.

  ttf: execfile <<-EOL
    #!/bin/sh
    echo "This will be run"
  EOL

  $(ttf)
  exec $(ttf)

The executable's stdout and stderr will be appended to your expected
stdout and stderr unless you redirect them using something like this:

  exec $(ttf) > /dev/null 2>&1

=head2 Named Create Files

While it's almost always more convenient to use temporary create files,
sometimes you need to specify the full path and filename of the file
to create.  This is easy; all tempfile creation is turned off if the
filename contains directory separators.  For instance, to create a
file in the /tmp directory:

  /tmp/01-contfile.conf: file = <<-EOL
    contents
  EOL

  cat /tmp/01-contfile.conf
 
If an absolute path is not specified ("./file.conf"), the starting directory
is the directory containing the testfile currently being executed.
This requires that you have write permissions on the directory containing
the currently running testfile of course.  That's not a good assumption.
New files always clobber old (permissions willing), so be careful
what you name them.

It is a good idea to name your files something similar to the 
testfile that created them.
Otherwise, when things go horribly wrong and all the tests are failing, it
can be hard to sift through the rubble and tell which file goes with which
test.  If you create multiple files with the same name, the new contents
clobber the old.  You can change the contents of a testfile this way,
but it's probably clearer to just use C<<<cat > $(file) <<EOL>>>.

Finally, for security reasons, you should never create files with
predictable names in /tmp or any other world-writable directory.
You should always let tmtest auto-generate those filenames.

=head2 Commands

You may list any number of commands to be executed in a single test file.
Their stdout and stderr will be concatenated together.

	echo "First Test"
	echo "Second Test"

If any of the commands returns a nonzero exit code, the test is terminated
immediately and the Create Files are not cleaned up.  This is so that
you can run the test by hand on the created files to see what went wrong.
Note that only exit codes are checked -- the created files are still deleted
if the test fails because the actual output didn't match the expected output.

As with the shell, use a backslash to continue a command on the following
line.

    cat my.file | tr [a-z] [A-Z] | \
        grep mydata | sort

You can pass data to your commands's standard input using pipes
or L<here documents|/"HERE DOCUMENTS">:

	echo "single-line input text" | mycommand
    mycommand <<-EOL
       multi-line input passed
       on the command's stdin
    EOL

L</"Interpolation"> works on commands just as it works on headers.
If you want to pass a variable to the shell, you must prefix the
C<$> with a C<\> so that tmtest won't try to interpret the C<$> itself.

You can specify environment variables before
the command, just as with the Bash shell.  The following example sets
VAR then runs a subshell to display it.  It's produces the same output
as "echo val".

	VAR=val sh -c 'echo $VAR'

=head2 Output Clause

The output clause specifies the output that you're expecting the command
to produce.  For instance, the following output clause shows a command
that outputs text on both stdout and stderr, and returns a 0 exit code:

  ------ STDERR: 
  this is some output on stderr
  ------ STDOUT: exit code 0 - no error
  First Test
  some more output

If the commands don't produce any stderr, then the stderr seciton is usually
omitted.  The stdout section is mandatory, but may be empty if the commands
don't produce any stdout.

Exit clauses always begin with at least 4 dashes.  This means that the
stderr section in your test file cannot include a line beginning with 4
dashes.  Because it's the last in the file, this restriction does not apply
to stdout.

tmtest ensures that the expected output matches the actual output down to
the last bit.  It will not ignore whitepace.  See L</"eachline"> if you
need to loosen the test requirements a bit.

=head1 SUBTESTS

Often you will want to run a large number of tests that differ only
in a very insignificant way.  For instance, if you're testing the
zmodem protocol, you'll want to ensure that you can send files of
many different sizes.  You could, of course,
use brute force and create a large number of
virtually identical testfiles.  This gets difficult when you
want to make a small change, however, since you
must update each test file by hand.

Subtests parameterize the testfile.  You specify the test to run,
then run it multiple times with different values.  Here is an example:

    subtests: on
  
    rzsz.test: file = <<-EOL
      randfile --seed=1 --size=$(size) > /tmp/tmtest-zmodem-data
      zmodem-send /tmp/tmtest-zmodem-data -o /tmp/tmtest-zmodem-output
      randfile --seed=1 --size=$(size) --check < /tmp/tmtest-zmodem-output
      # (using hardcoded /tmp files like this not generally a good idea...)
      ------ STDOUT: exit code 0 - no error
    EOL
  
    tmtest -D size=0 $(rzsz.test)
    tmtest -D size=1 $(rzsz.test)
    tmtest -D size=257 $(rzsz.test)
    tmtest -D size=5551212 $(rzsz.test)

The test is specified in the rzsz.test file.  It doesn't matter what
you name it, as long as it ends with ".test".  We then run tmtest
with this file 4 different times, each time specifying a different
value for size.

This test would work perfectly fine even if you didn't supply
the "subtests: on" header (except that the
current config file won't be read; you'd need to specify it with L<-f>).
However, you would not receive feedback until all test finished
completely, and you would receive only a pass/fail status.
It's nicer to run subtests with "subtests: on".

Turning the subtests header on changes the way tmtest runs commands.
When it seems a command beginning with "tmtest", it spawns the subprocess
in a slightly different way.  All other commands are executed as normal.

=over 2

=item *

The subprocess is told to read the config files from the current
test directory.
This means it will run with the exact same headers
as it would if it were a test in its own file in the current directory.

=item *

tmtest automatically interprets the success/fail of the subprocess
and prints each result as it arrives.  Without this, you'd need to
use an eachline to get rid of the changing testname, then verify that
the output is the correct number of "C<ok   tmtest-PID.ID.test>" lines.
You would only find out after all tests have been run whenter any of
them failed.

  eachline: s/tmtest-\d+\.\S+\./tmtest-PID.ID./

=item *

Each subtest's name includes its parameters.  For instance, if the
main test is named "MainTest", and it runs a subtest using "-D size=4",
then the subtest is named "MainTest: size=4".  This works for any number
of values: "-D size=4 -D name=foo" becomes "MainTest: name=foo, size=4".
The parameters are listed in alphabetical order.

=back

If you don't want the result of each subtest to show up in the main
test results then, by all means,
run the subtests without the "subtests" header.

It's easiest to debug subtests by L<exploding/"-e"> the testfile,
and running the failing tests by hand.

=head1 EXAMPLE

Here is an example of a complete test file:

    title: Run Echo
    author: Sam the Tester
    date: 31 Mar 2004

    echo this is some text

    ------ STDOUT: exit code 0 - no error
    this is some text

And here is a complex example.  This demonstrates how
to use most of tmtest's features:

    title:   Ensure the Echo Command Works
    author:  Sam the Tester
    date:    31 Mar 2004

    # CREATE FILES:

        # create a regular file continaing a single line:
    tmpf1: file = <<-EOL
        some more output
    EOL

        # create a bash script:
    tmpf2: execfile = <<-EOL
        #!/bin/bash
        echo "... and even more output!"
    EOL


    # COMMANDS:

        # 1. a simple command
    echo "some output"
        # 2. taking its input from the first create file
    cat $(tmpf1)
        # 3. taking its stdin from a here document:
    cat <<-EOL
        a little more
    EOL
        # 4. executing the second here document that we created:
    exec $(tmpf2)


    # OUTPUT CLAUSE:

    ---- STDOUT: exit code 0 - no error
    some output
    some more output
    a little more
    ... and even more output!

=head1 BUGS

Headers and commands should be able to be interleaved in the testfile
in any order.  Modifying a header only affects those commands that come
later in the testfile.  Unfortunately, this is not now things work
today.  It will take a significant rewrite of the parsing and execution
engine to make this happen.  The way things stand today,
only create file headers (see L</"Create Files">) 
may be interleaved with commands.

Also due to the crying need for a rewrite, you can only continue a header
on the same line it was declared on.  The following should
be legal because the heredoc is effectively on the same line as
the header because it is indented by whitespace.

    header:				# doesn't work
        <<EOL
    EOL

So, for now, you need to always ensure that heredocs are declared on
the same physical line as the header.

    header: <<EOL		# works
    EOL

=head1 SEE ALSO

L<tmtest(1)>

=head1 AUTHOR

Scott Bronson E<lt>bronson@rinspin.comE<gt>


