=head1 NAME

tmtest - Performs functional tests on command-line utilities.

=head1 SYNOPSIS

B<tmtest> [B<-d>|B<-o>] [I<dir>|I<testfile>...]

=head1 DESCRIPTION


=head1 OPTIONS

=over 8

=item B<-d> B<--diff>

Prints a diff of the expected results against the actual results.
The expected results are the lines prefixed with a '-',
and the actual results are prefixed with a '+'.
In other words, the '+' lines are ones that the test erroneously added,
and the '-' lines are ones that the test erroneously didn't print.

You can pipe the output straight into the patch
program to modify the test files.  This works when running tests
in subdirectories too, but you need to invoke C<patch -p0> becaue
the patch utility doesn't enter subdirectories by default.

    tmtest -d | less        # view patch to ensure no bad changes
    tmtest -d | patch -p0   # update every file (beware!)

DANGER!!!  This is the perfect way to let subtle bugs slip
into your test deck.  Make sure you know I<exactly> what is
being changed, right down to the whitespace.

=back

=head1 CONFIGURATION

tmtest reads its configuration first from F</etc/tmtest.conf> and
F<~/.tmtest.conf>.  Then it starts at the root directory and works
its way up to the current directory looking for files named "tmtest.conf"
It executes the config files each time it runs a test.  If you're
running 40 tests, your config file will get executed 40 times.

=over 8

=item ABORT

Causes the test to abort immediately.  You can optionally specify
a message.  See the example in L</MKDIR>.

    ABORT: too bad this test won't live

=item ADD_CWD_TO_PATH

This adds the directory containing the currently-running script to the
front of the $PATH variable.  Executables in this directory will be
run in preference to identically-named executables installed elsewhere
on the system.

=item ATEXIT

Specifies a command to be run after the test has finished, whether or
not it completed successfully.  This often makes cleaning up a lot
easier, especially if the test aborts.

	ATEXIT xset +dpms

You may specify any number of ATEXIT handlers.  They are executed in
reverse order of registration.  So, for example,

	ATEXIT echo one
	ATEXIT echo two

would output

	two
	one

=item DISABLE
=item DISABLED

Marks the test disabled.  If put in a config file, marks all tests in
that directory and all subdirectories disabled.

You can supply a reason string too

   DISABLED: this test is just too lame.

=item DOOM

Dooms the given file or directory to deletion when the test is finished.
Files and directories are deleted in the opposite order as they were registered.
Directories will only be deleted if they are empty.  Otherwise a warning is printed.

Note that you should never create files in /tmp with predictable file
names.  This opens you up to the symlink attack.  Instead, use mktemp(1).
(You may think now, "ah, but I'm the only user on my system.  I'm safe."
But what about the guy running your test two years from now on a
shared system?  Never use static filenames in /tmp.)  Also consider
the tempfile(1) utility if mktemp doesn't offer what you need.

	dir=`mktemp -d -t 02-XXXXXX` || ABORT can't mktemp.
	DOOM $dir
	cd $dir
	etc...

Or, more concisely:

	cd `DOOM mktemp -d -t 02-XXXXX` || ABORT can't make temporary directory.
	cd `DOOM mktemp -d` || ABORT can't make temporary directory.

Because you can't nest backticks (who's the genius responsible for that?),
DOOM checks to see if its first argument is 'mktemp'.  If it is, then it
runs all its arguments as a mktemp command.  Otherwise, it interprets
each argument as a filename that should be doomed.

TODO: "DOOM" is a weird name.  It's better than "DAMN" though.
Hopefully someone can think of something better.

"DOOM file" is essentially the same as "ATEXIT rm file".

=back

=head1 EXIT VALUE

tmtest returns a nonzero error code only if one or more tests
could not be run for some reason.  If all tests are successfully run,
even if they all fail, tmtest returns 0.

=head1 SUGGESTIONS

Look in the "examples" directory that came with this distribution.
You may find some helpful utilities.

If you want to be more pedantic, you might want to "set -e" in your
test file or configuration file.  This will make it so the test will
stop at the very first command that returns a nonzero exit status.

If you can't figure out what your test is doing, you might want
to add "set -v" or "set -x" to the top of the testfile.  This will
show you line-by-line what is happening.  You can also put them in
a config file if you're having configuration issues.

=head1 TUTORIAL

=head1 HISTORY

The original tmtest was written in June of 2000 when I got frustrated
with the TrestleMail mail relay program.  TrestleMail had become quite
large and complex but required some significant reorganization for version
0.8.  I wrote tmtest as a quick one-off Perl hack to allow me to tear
tmtest to pieces and have some hope of getting the pieces back together.

tmtest worked worked so well that I adapted it to a few other projects.
And after gluing on feature after feature over the years, tmtest finally
reached 1.0 in late 2004.

The Perl version had become far too large and complex.  So, in early 2005,
I rewrote the good parts in C.  This became tmtest 2.0.

=head1 FILES

L<tmtest-conf(5)>

=head1 SEE ALSO

L<testfile(1)>, L<tmtest-conf(5)>

=head1 AUTHOR

Scott Bronson <S<bronson@rinspin.com>>

