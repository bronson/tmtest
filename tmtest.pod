=head1 NAME

tmtest - Makes functional tests as easy to write as shell scripts.

=head1 SYNOPSIS

B<tmtest> [B<-d>|B<-o>] [I<dir>|I<testfile>...]

=head1 DESCRIPTION

=head1 OPTIONS

=over 8

=item B<-c> B<--config>

Specifies the config file to be read before running the test file.
Prevents the standard config files (/etc/tmtest.conf, /etc/tmtest/tmtest.conf,
~/.tmtestrc) from being read.  Also doesn't read config files unless they
are below the directory that contains the specified file.

=item B<-d> B<--diff>

Prints a diff of the expected results against the actual results.
The expected results are the lines prefixed with a '-',
and the actual results are prefixed with a '+'.
In other words, the '+' lines are ones that the test erroneously added,
and the '-' lines are ones that the test erroneously didn't print.

You can pipe the output straight into the patch
program to modify the test files.  This works when running tests
in subdirectories too, but you need to invoke C<patch -p0> becaue
the patch utility doesn't enter subdirectories by default.

    tmtest -d | less        # view patch to ensure no bad changes
    tmtest -d | patch -p0   # update every testfile.  Beware!

DANGER!!!  This is the perfect way to let subtle bugs slip
into your test deck.  Make sure you know exactly what you
changed, right down to the whitespace.

=item B<-f> B<--failures-only>

Runs the given tests and prints the paths of the tests that fail.
If you're struggling with a few failing tests, this will give you
a concise report of exactly what testfiles need to be investigated.

=item B<--ignore-extension>

Normally tmtest only runs files with names that end in ".test".
This argument causes tmtest to ignore the name of the testfile
and run every testfile it's told to.  Be careful!

=item B<-q> B<--quiet>

Tells tmtest to be quiet while running tests.  tmtest only prints the
test results, and a final passed/failed/disabled summary.  So, it's
quieter than it normally is but it certainly isn't silent.

=back

=head1 CONFIGURATION

tmtest reads its configuration first from F</etc/tmtest.conf> and
F<~/.tmtest.conf>.  Then it starts at the root directory and works
its way up to the current directory looking for files named "tmtest.conf"
Therefore, /home/test/a/b/tmtest.conf overrides /home/test/tmtest.conf
(because the latter is read and executed before the former).
It executes each config files every time it runs a test.  If you're
running 40 tests, your config files will each get executed 40 times.

Note that while config files are running, the current directory
is set to the testfile's directory.  For convenience, in each
config file, the MYFILE variable gives the full pathname to the config
file, and MYDIR gives just the directory portion (MYFILE and MYDIR
are available when running the test script too -- MYDIR is just the
current working directory).

Any output produced by the config files goes straight to the screen.
It will not contaminate the test results.  tmtest only cares about
the output produced by the testfile itself.

=over 8

=item ABORT

Causes the test to abort immediately.  You can optionally specify
a message.  See the example in L</MKDIR>.

    ABORT: too bad this test won't live

=item DISABLE
=item DISABLED

Marks the test disabled.  If put in a config file, marks all tests in
that directory and all subdirectories disabled.

You can supply a reason string too

   DISABLED: this test is just too lame.

=back

If you place an empty file named ".tmtest-ignore" into a directory,
tmtest will ignore that directory and all directories below it.
tmtest does not check parent directories for a .tmtest-ignore file!
It only checks for it when descending into subdirectories.  Therefore,
if you explicitly name a testfile on the command-line, the test will
be run even if it's in the same directory as a .tmtest-ignore file.


=head1 EXIT VALUE

tmtest exits with the number of tests that failed or were aborted.
If the entire test deck succeeds or is disabled, tmtest returns 0.
If more than 99 tests fail, tmtest just returns 99.

Generally, if something else prevented tests from running (say,
lack of memory or disk space), tmtest will return a number
between 100 and 199.  TODO: this isn't true yet.

=head1 TESTFILE

=over 8

=back

=head1 TEST RESULTS

There are two schools of thought on how testfiles should be written:

- like a shell script, where you need to manually check after the
commands that matter if they failed or not.

	command
	[ $? != 0 ] && echo got $? from command && exit $?

- like a makefile, where the first command that returns a nonzero
exit status causes the whole process to bail out.

	command
	# no need to check; if it returned nonzero, the script already exited.

tmtest uses the first technique by default; it treats testfiles like
shell scripts.

To make your testfile bail the instant it encounters an error, add
the command "set -e" to it.  If any subsequent command returns an
error, everything will bail out.  Add "set +e" to turn this behavior
back off.  You may also want to "set -o pipefail" as well.

If your testfiles are trivial, it probably makes sens to use -e to
save yourself a lot of manual checking.  Otherwise, the default of
+e is probably the safest, most understandable way to write tests.

=head1 TESTFILE SUGGESTIONS

Look in the "examples" directory that came with this distribution.
You may find some helpful utilities.

If you can't figure out what your test is doing, you might want
to add "set -x" to the top of the testfile.  This will
show you line-by-line what is happening (use "set -v" if "set -x"'s
command-line substitution produces hard-to-read results).
You can also put them in
a config file if you're having configuration issues.

Never create files in /tmp with static or easily predictable file names.
This opens you up to symlink attacks.  Instead, use mktemp(1)
or tempfile(1) (tmtest's built-in helpers use mktemp).
Also check the examples directory for functions
to make working with files easier.

	file=`mktemp -t 02-XXXXXX` || ABORT can't mktemp.

=head1 FAQ

How do I indent my stdout section?  My test prints the word "STDOUT" at
the beginning of a line, causing tmtest to complain about multiple STDOUT
sections.

=over 4

Answer: run your command's output through indent.

	mycmd | INDENT

If you have multiple commands, you can use parentheses to collect the
output:

	(	cmd1
		cmd2
	) 2>&1 | INDENT

=back

How do I retrieve my test program's exit result?

=over 4

Answer: use the shell variable $?:

    myprogram
	echo RESULT: $?

tmtest used to provide a RESULT section that automatically checked a
command's result value.  The problem is, most testfiles contain
multiple commands, with cleanup code, etc.  To ensure that tmtest
reads the correct value of $? would require drastic restrictions
on the things a testfile may do.  We decided that it was much better
to force the user to insert $? in the proper spot rather than add
a whole bunch of arbitrary restrictions.

=back

=head1 HISTORY

The original tmtest script was written in June of 2000 when I got frustrated
with the TrestleMail mail relay program.  TrestleMail, now large and complex,
required some serious reorganization.  I wrote tmtest as a quick one-off Perl
hack to allow me to tear TrestleMail to shreds and have some hope of getting
the peices back together.

The Perl version was too slow and its testfile format took some learking.
So, in early 2005, I rewrote the good parts in C and tried to make it as
much like Bash as possible.

=head1 LICENSE

tmtest is distributed under the Lesser General Public License.
See the COPYING file included with this tmtest distribution for
more details or L<http://www.gnu.org/copyleft/lesser.html>.

=head1 FILES

L<tmtest.conf(5)>

=head1 SEE ALSO

L<testfile(1)>, L<tmtest.conf(5)>

=head1 AUTHOR

Scott Bronson <S<bronson@rinspin.com>>

