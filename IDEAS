Problems:

bash is really fast and loose with variables.  It's going to give
us trouble when trying to specify the stdout and stderr.
Using string expansion $'a\n\n' might help.

No problem.  We can't pull the value from variables anyway since
STDOUT and STDERR should come after the tests.  If the test bails,
they won't get executed.  So, we pull EXSTDOUT, ERR, and EXITVAL
from the testfile before it even gets run.  Unlike the original
tmtest, though, STDOUT and RESULT are split into their own sections,
and the sections may come in any order.

So, we specify the STDOUT and STDERR using sections like tmtest
because, well, it's worked so far.  And heredocs are more complex
and visually less pleasing.


tmtest will always strip a single leading newline from
STDOUT and STDERR.  This is because this:

    STDOUT='
    first line
    second line
    third line
    '

is a lot more readable than this:

    STDOUT='first line
    second line
    third line
    '


Our variables:
TITLE
AUTHOR
DATE
STDOUT
STDERR
RESULT


Our functions:
disabled()
tmpfile()
newfile()


By default tests run with "set -e".  This means that the shell
will exit the first time a command returns a nonzero result code
(unless it is being used in a pipeline, arithmetic expression, etc).
That error code becomes the error code for your whole test.
Usually this is what you want -- commands returning nonzero exit
code typically indicate errors.  If not, put a "set +e" in either
your script or a configuration file somewhere.  This means the
test will run to completion and return 0, no matter what any
intermediate commands returned.


How it's going to work:

The C program will assemble all the relevant files into a bash script:

    TMTEST_SECTION_MARKER="-=- TMTEST SECTION MARKER -=- 12 Jan 2004 blah:blah:blah uniqid"
    set -e      # bail if we hit any errors
    source /etc/tmtest.conf
    if $DISABLED; then echo $TMTEST_SECTION_MARKER; echo "disabled by /etc/tmtest.conf"; exit 0; fi
    source ~/.tmtestrc
    if $DISABLED; then echo $TMTEST_SECTION_MARKER; echo "disabled by /etc/tmtest.conf"; exit 0; fi
    source ../../tmtest.conf
    if $DISABLED; then echo $TMTEST_SECTION_MARKER; echo "disabled by /etc/tmtest.conf"; exit 0; fi
    source tmtest.conf
    if $DISABLED; then echo $TMTEST_SECTION_MARKER; echo "disabled by /etc/tmtest.conf"; exit 0; fi
    source 09-bingo.test
    # now the output is complete.  We need to discover what
    # the result code, stdout, and stderr are.
    echo TMTEST_SECTION_MARKER
    echo $EXPECTED_EXIT_CODE
    echo TMTEST_SECTION_MARKER
    echo $EXPECTED_STDOUT
    echo TMTEST_SECTION_MARKER
    echo $EXPECTED_STDERR

to tell if a variable is defined:
<twkm> yes, use the + expansion
<twkm> 2.05b$ var="" ; [[ ${var+exists} ]] && echo exists
<twkm> exists
<twkm> 2.05b$ unset var ; [[ ${var+exists} ]] && echo exists
<twkm> 2.05b$

maybe allow setting -v to show statements and -x
to show expressions as the script runs.
    
    all tests must begin with begin_test()
    This just ensures the test isn't disabled before running it.
    and end with end_test().  not sure why yet.
        NO WAY.  No begin_test().  But you do have to call a function
        to disable a test.

<SeaForth> #!/bin/bash
<SeaForth> destdir=`pwd`
<SeaForth> dir=/
<SeaForth> i=2
<SeaForth> while true ; do
<SeaForth>         cd $dir
<SeaForth>         echo $dir
<SeaForth>         # do your thing here
<SeaForth>         next=`echo $destdir | cut -f ${i} -d "/"`
<SeaForth>         if [[ $next != "" ]] ; then
<SeaForth>                 dir=$dir/$next
<SeaForth>                 i=$((i + 1))
<SeaForth>         else
<SeaForth>                 exit
<SeaForth>         fi
<SeaForth> done

<greycat> if you want all the stdout henceforth to go to a log file, exec >/my/log

bar=foo;foo="Hello, World; echo ${!bar}


-c: obsolete
--config-dir: obsolete.
-D: works.  adds the values to the input file after the last config file but before the start of the script.
-d: works.  runs diff against expected vs. actual results.
-e: unfortunate, must be removed.  maybe exploding can be added later.
-f: obsolete
-h: obsolete
-l: obsolete
-o: works.  replaces the expected stdout in the testfile with the given stdout
-q: obsolete
-t --timeout: tells how long to wait before terminating a stalled test.
-v: works.
-h -?: works.
-V --version: works.

Exit Value:
    tmtest returns a nonzero error code only if one or more tests could not
    be run for some reason.  If all tests run to completion, even if
    they all fail to match the expected output, tmtest returns 0.

Config Files:
Configuration files are just bash scripts.  Any output produced is added
to the test file's output (both stdout and stderr) so config files need
to be very careful not to produce any output.  Except when they intend to.

Test Files:
Test files are just bash scripts.  They produce output on stdout and error
on stderr, and contain what the expected stdout and stderr should be.
tmtest ensures they're the same.  If not, the test fails.


variables:
title: obsolete.  Taken from the filename.
author: automatically added -- user's login name if doesn't already exist.
date: automatically added if doesn't exist in testfile.  defaults to today's date.
curfile: obsolete.  replaced by BASH_SOURCE
curpath: obsolete.  replaced by basename(BASH_SOURCE)
include: obsolete.  replaced by "source" bash function.
interpolate: obsolete.
recurse: obsolete.
require-tmtest: obsolete.
executable: obsolete.  manipulate $PATH yourself.
eachline: obsolete.  replaced by SUBSTITUTE_OUTPUT, SUBSTITUTE_STDOUT, and SUBSTITUTE_STDERR.
sub_stdout, etc.:
    ok.  try to program your test to produce the actual output
    in the expected output variable.  If this is too difficult then you
    can specify eachline as a PCRE substitution expression to be run
    over each line of t
explodedir: obsolete
subtests: obsolete.  replaced by for loops.
    we should offer a function to produce and process intermediate
    results though.  that's every bit as good as subtests.

maybe obsolete:
desc/description: a description for this test
doc: comprehensive documentation for this test


CREATE FILES: obsolete.
    Maybe we can add a function to make creating files easier though.

Both bugs are fixed, and the code base is drasitcally reduced.



main.c: processes cmdline args.
find.c: directory recursing calls.
