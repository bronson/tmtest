# tmtest.conf
# Scott Bronson
# 31 Dec 2004


# This can be a little confusing because one copy of tmtest runs another
# copy and checks its output.  We'll call the executable doing the testing
# the superexec, and the program being tested the subexec.
#
# Because the user launched the superexec, we have no control over which
# executable is used to run the tests.  Hopefully it's reasonably stable.
#
# This configuration file, tmtest.conf, tells the superexec how to run the
# test battery.  Local settings are read from /etc/tmtest.conf, ~/.tmtestrc,
# etc., then this file is loaded.
#
# The subtests do not read any configuration files outside of the test
# directory except for one, tmtest.sub.conf.


# turn on debugging
# set -x


# All tests are written to be pedantic.  We want them to exit at the
# first sign of trouble and have the result code reported in RESULT.

set -e



# Add the current directory at the front of the PATH environment variable.
# This means that while the test is running, any executables in this
# directory will take priority over similarly-named executables anywhere
# else (like /usr/bin or ~/bin).  This ensures that we lauch the unstable
# copy of tmtest to handle each test.

PATH="$MYDIR:$PATH";


# All testfiles include $args in the arguments to the subexec.
# (if they don't, it's a bug in the test).
#
# This allows us to specify default commands for all tests being run.
# For instance, forcing the config file ensures that no config files
# outside the test directory will be read.  This way we can be sure
# that the tests are not succeeding due to some local configuration;
# their environment is as clean as we can possibly make it.

args="--config=$MYPATH/test/tmtest.sub.conf"

# This allows us to run tests without installing tmtest first.
. tmlib.sh

